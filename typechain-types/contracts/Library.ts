/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Library {
  export type BookStruct = { isbn: string; title: string; author: string };

  export type BookStructOutput = [string, string, string] & {
    isbn: string;
    title: string;
    author: string;
  };
}

export interface LibraryInterface extends utils.Interface {
  functions: {
    "addBook(string,string,string)": FunctionFragment;
    "borrow(uint256)": FunctionFragment;
    "getBookBorrowing()": FunctionFragment;
    "getBookById(uint256)": FunctionFragment;
    "getListBook()": FunctionFragment;
    "getName()": FunctionFragment;
    "isAvailable(uint256)": FunctionFragment;
    "isBorrowingBook(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setName(string)": FunctionFragment;
    "takeBack(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addBook"
      | "borrow"
      | "getBookBorrowing"
      | "getBookById"
      | "getListBook"
      | "getName"
      | "isAvailable"
      | "isBorrowingBook"
      | "owner"
      | "renounceOwnership"
      | "setName"
      | "takeBack"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addBook",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBookBorrowing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBookById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListBook",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAvailable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBorrowingBook",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "takeBack",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addBook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBookBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBookById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBorrowingBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takeBack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Borrow(address,uint256)": EventFragment;
    "ChangeName(string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeName"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface BorrowEventObject {
  borrower: string;
  bookId: BigNumber;
}
export type BorrowEvent = TypedEvent<[string, BigNumber], BorrowEventObject>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface ChangeNameEventObject {
  newName: string;
}
export type ChangeNameEvent = TypedEvent<[string], ChangeNameEventObject>;

export type ChangeNameEventFilter = TypedEventFilter<ChangeNameEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Library extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LibraryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addBook(
      _isbn: string,
      _title: string,
      _author: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrow(
      _bookId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBookBorrowing(
      overrides?: CallOverrides
    ): Promise<[Library.BookStructOutput[]]>;

    getBookById(
      _bookId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string] & {
        bookId: BigNumber;
        isbn: string;
        title: string;
        author: string;
        borrower: string;
      }
    >;

    getListBook(
      overrides?: CallOverrides
    ): Promise<[Library.BookStructOutput[]]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    isAvailable(
      _bookId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBorrowingBook(
      _bookId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeBack(
      _bookId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addBook(
    _isbn: string,
    _title: string,
    _author: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrow(
    _bookId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBookBorrowing(
    overrides?: CallOverrides
  ): Promise<Library.BookStructOutput[]>;

  getBookById(
    _bookId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, string] & {
      bookId: BigNumber;
      isbn: string;
      title: string;
      author: string;
      borrower: string;
    }
  >;

  getListBook(overrides?: CallOverrides): Promise<Library.BookStructOutput[]>;

  getName(overrides?: CallOverrides): Promise<string>;

  isAvailable(
    _bookId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isBorrowingBook(
    _bookId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setName(
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeBack(
    _bookId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addBook(
      _isbn: string,
      _title: string,
      _author: string,
      overrides?: CallOverrides
    ): Promise<void>;

    borrow(_bookId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getBookBorrowing(
      overrides?: CallOverrides
    ): Promise<Library.BookStructOutput[]>;

    getBookById(
      _bookId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string] & {
        bookId: BigNumber;
        isbn: string;
        title: string;
        author: string;
        borrower: string;
      }
    >;

    getListBook(overrides?: CallOverrides): Promise<Library.BookStructOutput[]>;

    getName(overrides?: CallOverrides): Promise<string>;

    isAvailable(
      _bookId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBorrowingBook(
      _bookId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setName(_name: string, overrides?: CallOverrides): Promise<void>;

    takeBack(_bookId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Borrow(address,uint256)"(
      borrower?: null,
      bookId?: null
    ): BorrowEventFilter;
    Borrow(borrower?: null, bookId?: null): BorrowEventFilter;

    "ChangeName(string)"(newName?: null): ChangeNameEventFilter;
    ChangeName(newName?: null): ChangeNameEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addBook(
      _isbn: string,
      _title: string,
      _author: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrow(
      _bookId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBookBorrowing(overrides?: CallOverrides): Promise<BigNumber>;

    getBookById(
      _bookId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getListBook(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    isAvailable(
      _bookId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBorrowingBook(
      _bookId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeBack(
      _bookId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addBook(
      _isbn: string,
      _title: string,
      _author: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      _bookId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBookBorrowing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBookById(
      _bookId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAvailable(
      _bookId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBorrowingBook(
      _bookId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setName(
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeBack(
      _bookId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
